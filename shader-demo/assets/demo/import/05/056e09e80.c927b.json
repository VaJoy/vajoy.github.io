[1,["27Ual4WF1K+YL1LQ8RcRNR"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_props","_states","_defines"],-1]],[[0,0,1,2,4],[1,0,1,2,3,5]],[[[[0,"../demo/12-post-pipeline/gaussian-blur/gaussian-blur",[{"hash":3524216460,"name":"../demo/12-post-pipeline/gaussian-blur/gaussian-blur|blur-vs|flex-fs:frag","blocks":[{"name":"UBO","stageFlags":16,"binding":0,"members":[{"name":"textureSize","type":14,"count":1},{"name":"blurSize","type":13,"count":1},{"name":"isHorizontal","type":5,"count":1},{"name":"sampleCount","type":5,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"UBO","stageFlags":16,"binding":0,"members":[{"name":"textureSize","type":14,"count":1},{"name":"blurSize","type":13,"count":1},{"name":"isHorizontal","type":5,"count":1},{"name":"sampleCount","type":5,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[],"samplerTextures":[{"name":"inputTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 uv;\nvoid main () {\n  vec4 pos = vec4(a_position, 1.0);\n  gl_Position = pos;\n  uv = a_texCoord;\n}","frag":"\nprecision highp float;\nin vec2 uv;\nlayout(std140) uniform UBO {\n  vec2 textureSize;\n  float blurSize;\n  int isHorizontal;\n  int sampleCount;\n};\nuniform sampler2D inputTexture;\nfloat gaussian(float x, float sigma) {\n  return exp(-(x * x) / (2.0 * sigma * sigma)) / (sqrt(6.2831853) * sigma);\n}\nvec4 frag () {\n  int halfSampleCount = sampleCount / 2;\n  vec2 u_texel = 1.0 / textureSize;\n  vec2 offsetDir = isHorizontal > 0 ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec2 texel = blurSize / float(halfSampleCount) * (isHorizontal > 0 ? u_texel.x : u_texel.y) * offsetDir;\n  float sigma = 4.0;\n  vec4 sum = vec4(0.0);\n  float weightSum = 0.0;\n  float w0 = gaussian(0.0, sigma);\n  sum += texture(inputTexture, uv) * w0;\n  weightSum += w0;\n  for (int i = 1; i < 50; i++) {\n    if (i > halfSampleCount) break;\n    float w = gaussian(float(i), sigma);\n    vec2 offset = texel * float(i);\n    vec4 sample1 = texture(inputTexture, uv + offset);\n    vec4 sample2 = texture(inputTexture, uv - offset);\n    sum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  vec4 blur = sum / weightSum;\n  return blur;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 uv;\nvoid main () {\n  vec4 pos = vec4(a_position, 1.0);\n  gl_Position = pos;\n  uv = a_texCoord;\n}","frag":"\nprecision highp float;\nvarying vec2 uv;\n   uniform vec2 textureSize;\n   uniform float blurSize;\n   uniform int isHorizontal;\n   uniform int sampleCount;\nuniform sampler2D inputTexture;\nfloat gaussian(float x, float sigma) {\n  return exp(-(x * x) / (2.0 * sigma * sigma)) / (sqrt(6.2831853) * sigma);\n}\nvec4 frag () {\n  int halfSampleCount = sampleCount / 2;\n  vec2 u_texel = 1.0 / textureSize;\n  vec2 offsetDir = isHorizontal > 0 ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec2 texel = blurSize / float(halfSampleCount) * (isHorizontal > 0 ? u_texel.x : u_texel.y) * offsetDir;\n  float sigma = 4.0;\n  vec4 sum = vec4(0.0);\n  float weightSum = 0.0;\n  float w0 = gaussian(0.0, sigma);\n  sum += texture2D(inputTexture, uv) * w0;\n  weightSum += w0;\n  for (int i = 1; i < 50; i++) {\n    if (i > halfSampleCount) break;\n    float w = gaussian(float(i), sigma);\n    vec2 offset = texel * float(i);\n    vec4 sample1 = texture2D(inputTexture, uv + offset);\n    vec4 sample2 = texture2D(inputTexture, uv - offset);\n    sum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  vec4 blur = sum / weightSum;\n  return blur;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":0,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":4}},"defines":[]}],[{"name":"horizontal-gaussian-blur","passes":[{"pass":"post-process","program":"../demo/12-post-pipeline/gaussian-blur/gaussian-blur|blur-vs|flex-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4}]},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"textureSize":{"type":14,"value":[1280,720]},"blurSize":{"type":13,"value":[20]},"isHorizontal":{"type":5,"value":[1]},"sampleCount":{"type":5,"value":[10]}}}]},{"name":"vertical-gaussian-blur","passes":[{"pass":"post-process","program":"../demo/12-post-pipeline/gaussian-blur/gaussian-blur|blur-vs|flex-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4}]},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"textureSize":{"type":14,"value":[1280,720]},"blurSize":{"type":13,"value":[20]},"isHorizontal":{"type":5,"value":[1]},"sampleCount":{"type":5,"value":[10]}}}]}]]],0,0,[],[],[]],[[[1,"hor-blur",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[0],[0]]]]
