[1,["a6yTzdYvNH4b0h0HTTL60i","42Kqp2OjdBB7sFPCWf7j4U"],["bgTexture","_effectAsset"],["cc.RenderTexture",["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[1,0,1,2,3,4],[2,0,1,2,4]],[[[[0,"darken",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_DARKEN":true}],[[[{},"bgTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]],[[[1,"../demo/5-mix-blend-mode/others",[{"hash":3588124293,"name":"../demo/5-mix-blend-mode/others|vs:vert|fs:frag","blocks":[{"name":"Args","stageFlags":1,"binding":0,"members":[{"name":"offsetX","type":13,"count":1},{"name":"offsetY","type":13,"count":1}],"defines":[]},{"name":"BloomUBO","stageFlags":1,"binding":1,"members":[{"name":"texSize","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"bgTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Args","stageFlags":1,"binding":0,"members":[{"name":"offsetX","type":13,"count":1},{"name":"offsetY","type":13,"count":1}],"defines":[]},{"name":"BloomUBO","stageFlags":1,"binding":1,"members":[{"name":"texSize","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"bgTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\n  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n  in vec3 a_position;\n  in vec2 a_texCoord;\n  out vec2 uv;\n  out vec2 bgUv;\n  layout(std140) uniform Args {\n      float offsetX;\n      float offsetY;\n  };\n  layout(std140) uniform BloomUBO {\n      mediump vec4 texSize;\n  };\n  vec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord;\n  float bgX = (uv.x * 192.0 + offsetX) / 1280.0;\n  float bgY = (uv.y * 192.0 + offsetY) / 720.0;\n  bgUv = vec2(bgX, bgY);\n  bgUv = bgUv = cc_cameraPos.w > 1.0 ? vec2(bgUv.x, 1.0 - bgUv.y) : bgUv;\n  return  pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D cc_spriteTexture;\nin vec2 uv;\nin vec2 bgUv;\nuniform sampler2D bgTexture;\nconst float EPSILON = 0.00001;\nfloat luminance(vec3 c) {\n  return dot(c, vec3(0.2126, 0.7152, 0.0722));\n}\nvec3 setLum(vec3 c, float l) {\n  float d = l - luminance(c);\n  return c + vec3(d);\n}\nvec3 setSat(vec3 c, float s) {\n  float l = luminance(c);\n  vec3 grey = vec3(l);\n  return mix(grey, c, s);\n}\nfloat sat(vec3 c) {\n  return max(max(c.r, c.g), c.b) - min(min(c.r, c.g), c.b);\n}\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), step(0.5, base));\n}\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return min(base, blend);\n}\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return max(base, blend);\n}\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return base / max(vec3(EPSILON), 1.0 - blend);\n}\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return 1.0 - (1.0 - base) / max(vec3(EPSILON), blend);\n}\nvec3 blendHardLight(vec3 base, vec3 blend) {\n  return blendOverlay(blend, base);\n}\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return mix(\n    sqrt(base) * blend * 2.0,\n    1.0 - 2.0 * (1.0 - base) * (1.0 - blend),\n    blend\n  );\n}\nvec3 blendDifference(vec3 base, vec3 blend) {\n  return abs(base - blend);\n}\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\nvec3 blendHue(vec3 base, vec3 blend) {\n  float s = sat(base);\n  float l = luminance(base);\n  return setLum(setSat(blend, s), l);\n}\nvec3 blendSaturation(vec3 base, vec3 blend) {\n  float s = sat(blend);\n  float l = luminance(base);\n  return setLum(setSat(base, s), l);\n}\nvec3 blendColor(vec3 base, vec3 blend) {\n  return setLum(blend, luminance(base));\n}\nvec3 blendLuminosity(vec3 base, vec3 blend) {\n  return setLum(base, luminance(blend));\n}\nvec4 frag() {\n  vec4 blendColor = texture(cc_spriteTexture, uv);\n  vec4 baseColor = texture(bgTexture, bgUv);\n  vec3 color = vec3(1.0);\n  #if USE_DARKEN\n      color = blendDarken(baseColor.rgb, blendColor.rgb);\n  #elif USE_LIGHTEN\n      color = blendLighten(baseColor.rgb, blendColor.rgb);\n  #elif USE_OVERLAY\n      color = blendOverlay(baseColor.rgb, blendColor.rgb);\n  #elif USE_COLOR_DODGE\n      color = blendColorDodge(baseColor.rgb, blendColor.rgb);\n  #elif USE_COLOR_BURN\n      color = blendColorBurn(baseColor.rgb, blendColor.rgb);\n  #elif USE_HARD_LIGHT\n      color = blendHardLight(baseColor.rgb, blendColor.rgb);\n  #elif USE_SOFT_LIGHT\n      color = blendSoftLight(baseColor.rgb, blendColor.rgb);\n  #elif USE_DIFFERENCE\n      color = blendDifference(baseColor.rgb, blendColor.rgb);\n  #elif USE_EXCLUSION\n      color = blendExclusion(baseColor.rgb, blendColor.rgb);\n  #elif USE_HUE\n      color = blendHue(baseColor.rgb, blendColor.rgb);\n  #elif USE_SATURATION\n      color = blendSaturation(baseColor.rgb, blendColor.rgb);\n  #elif USE_COLOR\n      color = blendColor(baseColor.rgb, blendColor.rgb);\n  #elif USE_LUMINOSITY\n      color = blendLuminosity(baseColor.rgb, blendColor.rgb);\n  #endif\n  return vec4(color, blendColor.a);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\n  precision highp float;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n  attribute vec3 a_position;\n  attribute vec2 a_texCoord;\n  varying vec2 uv;\n  varying vec2 bgUv;\n       uniform float offsetX;\n     uniform float offsetY;\n  vec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord;\n  float bgX = (uv.x * 192.0 + offsetX) / 1280.0;\n  float bgY = (uv.y * 192.0 + offsetY) / 720.0;\n  bgUv = vec2(bgX, bgY);\n  bgUv = bgUv = cc_cameraPos.w > 1.0 ? vec2(bgUv.x, 1.0 - bgUv.y) : bgUv;\n  return  pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform sampler2D cc_spriteTexture;\nvarying vec2 uv;\nvarying vec2 bgUv;\nuniform sampler2D bgTexture;\nconst float EPSILON = 0.00001;\nfloat luminance(vec3 c) {\n  return dot(c, vec3(0.2126, 0.7152, 0.0722));\n}\nvec3 setLum(vec3 c, float l) {\n  float d = l - luminance(c);\n  return c + vec3(d);\n}\nvec3 setSat(vec3 c, float s) {\n  float l = luminance(c);\n  vec3 grey = vec3(l);\n  return mix(grey, c, s);\n}\nfloat sat(vec3 c) {\n  return max(max(c.r, c.g), c.b) - min(min(c.r, c.g), c.b);\n}\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), step(0.5, base));\n}\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return min(base, blend);\n}\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return max(base, blend);\n}\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return base / max(vec3(EPSILON), 1.0 - blend);\n}\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return 1.0 - (1.0 - base) / max(vec3(EPSILON), blend);\n}\nvec3 blendHardLight(vec3 base, vec3 blend) {\n  return blendOverlay(blend, base);\n}\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return mix(\n    sqrt(base) * blend * 2.0,\n    1.0 - 2.0 * (1.0 - base) * (1.0 - blend),\n    blend\n  );\n}\nvec3 blendDifference(vec3 base, vec3 blend) {\n  return abs(base - blend);\n}\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\nvec3 blendHue(vec3 base, vec3 blend) {\n  float s = sat(base);\n  float l = luminance(base);\n  return setLum(setSat(blend, s), l);\n}\nvec3 blendSaturation(vec3 base, vec3 blend) {\n  float s = sat(blend);\n  float l = luminance(base);\n  return setLum(setSat(base, s), l);\n}\nvec3 blendColor(vec3 base, vec3 blend) {\n  return setLum(blend, luminance(base));\n}\nvec3 blendLuminosity(vec3 base, vec3 blend) {\n  return setLum(base, luminance(blend));\n}\nvec4 frag() {\n  vec4 blendColor = texture2D(cc_spriteTexture, uv);\n  vec4 baseColor = texture2D(bgTexture, bgUv);\n  vec3 color = vec3(1.0);\n  #if USE_DARKEN\n      color = blendDarken(baseColor.rgb, blendColor.rgb);\n  #elif USE_LIGHTEN\n      color = blendLighten(baseColor.rgb, blendColor.rgb);\n  #elif USE_OVERLAY\n      color = blendOverlay(baseColor.rgb, blendColor.rgb);\n  #elif USE_COLOR_DODGE\n      color = blendColorDodge(baseColor.rgb, blendColor.rgb);\n  #elif USE_COLOR_BURN\n      color = blendColorBurn(baseColor.rgb, blendColor.rgb);\n  #elif USE_HARD_LIGHT\n      color = blendHardLight(baseColor.rgb, blendColor.rgb);\n  #elif USE_SOFT_LIGHT\n      color = blendSoftLight(baseColor.rgb, blendColor.rgb);\n  #elif USE_DIFFERENCE\n      color = blendDifference(baseColor.rgb, blendColor.rgb);\n  #elif USE_EXCLUSION\n      color = blendExclusion(baseColor.rgb, blendColor.rgb);\n  #elif USE_HUE\n      color = blendHue(baseColor.rgb, blendColor.rgb);\n  #elif USE_SATURATION\n      color = blendSaturation(baseColor.rgb, blendColor.rgb);\n  #elif USE_COLOR\n      color = blendColor(baseColor.rgb, blendColor.rgb);\n  #elif USE_LUMINOSITY\n      color = blendLuminosity(baseColor.rgb, blendColor.rgb);\n  #endif\n  return vec4(color, blendColor.a);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":45,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":0}},"defines":[{"name":"USE_DARKEN","type":"boolean"},{"name":"USE_LIGHTEN","type":"boolean"},{"name":"USE_OVERLAY","type":"boolean"},{"name":"USE_COLOR_DODGE","type":"boolean"},{"name":"USE_COLOR_BURN","type":"boolean"},{"name":"USE_HARD_LIGHT","type":"boolean"},{"name":"USE_SOFT_LIGHT","type":"boolean"},{"name":"USE_DIFFERENCE","type":"boolean"},{"name":"USE_EXCLUSION","type":"boolean"},{"name":"USE_HUE","type":"boolean"},{"name":"USE_SATURATION","type":"boolean"},{"name":"USE_COLOR","type":"boolean"},{"name":"USE_LUMINOSITY","type":"boolean"}]}],[{"name":"mix-blend-mode","passes":[{"program":"../demo/5-mix-blend-mode/others|vs:vert|fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"bgTexture":{"value":"grey","type":28},"offsetX":{"type":13,"value":[0]},"offsetY":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","w":1280,"h":720,"n":"render-texture"}],[0],0,[],[],[]]]]
